
services:

  db:
    image: "postgres:16-alpine"
    restart: always
    env_file:
      - ./.env.dev
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_PORT: ${DB_PORT}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      bookstore_network:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -q -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5

  db_migrations:
    build:
      context: .
    command: python manage.py migrate
    env_file:
      - ./.env.dev
    networks:
      - bookstore_network
    depends_on:
      db: 
        condition: service_healthy

  redis_db:
    image: "redis:alpine"
    ports:
      - "6382:6379"
    networks: 
      - bookstore_network
    volumes:
      - redis_data:/data

  backend:
    build: 
      context: .
    command: python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    env_file:
      - ./.env.dev
    networks:
      - bookstore_network
    volumes:
      - .:/app  # Mount code for live development
    depends_on:
      - db
      - db_migrations
      - redis_db
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/v1/health-check/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

    restart: always

 
networks:
  bookstore_network:

volumes:
  postgres_data:
  redis_data:
    external: false
